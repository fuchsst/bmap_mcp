[build-system]
requires = ["setuptools>=80.8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bmad-mcp-server"
version = "1.0.0"
description = "BMAD MCP Server - Expose BMAD methodology as standardized tools for AI systems"
authors = [
    {name = "BMAD Project", email = "info@bmadcode.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "bmad", "ai", "development", "methodology", "crewai"]

dependencies = [
    "fastmcp",
    "crewai>=0.121.0",
    "pydantic>=2.11.5",
    "fastapi",
    "uvicorn>=0.34.2",
    "pyyaml>=6.0",
    "python-dotenv",
    "aiofiles>=24.1.0",
    "click>=8.2.1",
    "rich",  # For better CLI output
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    "black>=25.1.0",
    "isort>=6.0.1",
    "flake8>=7.2.0",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
]

[project.scripts]
bmad-mcp-server = "bmad_mcp_server.main:main"

[project.urls]
Homepage = "https://github.com/fuchsst/bmad-mcp-server"
Documentation = "https://fuchsst.github.io/bmad-mcp-server"
Repository = "https://github.com/fuchsst/bmad-mcp-server"
Issues = "https://github.com/fuchsst/bmad-mcp-server/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
bmad_mcp_server = [
    "templates/*.md",
    "checklists/*.md",
    "py.typed",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bmad_mcp_server"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "fastmcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bmad_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
